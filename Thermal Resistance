function[ThermalResistanceTable,dttable,dtgraph,ThermalResistanceGraph]=HeatpipeFinal(filename,NoWV,Watt1,Watt2,Watt3,Watt4,NoUC,Column1,Column2,Column3,Column4,fileoutput,Orientation,PLFColumn)
%% Section 1 - Importing the Table, Removing Plate Data, Setting Watt Values
TableT = readtable(filename); %importing file into Matlab
if NoUC == 2  %checking how many columns it can remove from the graph autonmously %NoUC stands for number of undesired columns 
   TableT(:,Column1) = []; %(i.e plates/letter/general undisierable)
   TableT(:,Column2) = [];
elseif NoUC == 3
        TableT(:,Column3) = [];
        TableT(:,Column2) = [];
        TableT(:,Column1) = [];
else NoUC = 4;
            TableT(:,Column4) = [];
            TableT(:,Column3) = [];
            TableT(:,Column2) = [];
            TableT(:,Column1) = [];
end
if NoWV == 2 %Checking how many values were inputed
    Watt = [Watt1,Watt2]; 
elseif NoWV == 3
        Watt =[Watt1,Watt2,Watt3];
else NoWV = 4;
        Watt =[Watt1,Watt2,Watt3,Watt4];
end
%% Section 2 - Creating Useful Variables and Matricies

Columnlength = width(TableT); %understanding how many columns there are
Rowlength = height(TableT);
TableM = table2array(TableT); %converting the table to a matricies
g=(Columnlength/2);
%% Section 3 - Calculating & Plotting DT

for L=1:g % This loop subtractss the Evaporator Columns by the Condensor Columns and stores it as dttable
dttable(:,L)=TableM(:,2*L) - TableM(:,2*L-1);
end

figure % This Plot shows the DT for each 019 Serial Number--AUTONOMOUS
for k=1:(Columnlength/2)
subplot(4,4,k)
x=1:Rowlength;
y= dttable(:,k);
xlabel('Temperature [C]');
ylabel('Number of Scans');
plot(x,y)
title('Change in Temperature') 
end
%% Section 4 - Finding Dwells and Powersplitting Process

PLindicies= [];
PLfinder=zeros(1,(Rowlength/10));
for f = linspace(10,(Rowlength),(Rowlength/10)) %This loop determines values that have a delta of 1 above 10 values previous to it in the first column
   PLfinder(1,(f/10))= TableM(f,(PLFColumn))-TableM(f-9,(PLFColumn));
        if PLfinder(1,(f/10)) >= .3 || -1 > PLfinder(1,(f/10)) && PLfinder(1,(f/10)) > -10
            PLindicies= [PLindicies; f];
        end
end

if length(PLindicies) ~= (NoWV+1)
PLindicies(end+1)= length(TableM);
end

for t=1:(NoWV) % This loop determines if the numbers saved from the previous loops are repeats of the same rises
    while (1) %has a tolerance of 100 values outside of it, so if there is a large swell than the code will be unable to identify it
        if PLindicies(t,1)+20 >= PLindicies(t+1,1)
            PLindicies(t+1,:)=[];
        elseif PLindicies(t,1)+20 < PLindicies(t+1,1)
            break
        end
    end
end

PLIndexF=[]; % This loop outputs the final values that the power level will be based off of
for q=1:(NoWV+1)
    PLIndexF=[PLIndexF; PLindicies(q,:)];
end
%% Section 5 - Calculating DT & Plotting

PL1=[];
Pl2=[];
PL3=[];
PL4=[];

if NoWV == 2 % This loop sorts the raw data into matricies based upon power level
    for f=PLIndexF(1): PLIndexF(2)
        PL1((f-(f-1)),:)=TableM(f,:);
    end
    for f=PLIndexF(2): PLIndexF(3)
        PL2((f-(f-1)),:)=TableM(f,:);
    end
elseif NoWV == 3
    for f=PLIndexF(1): PLIndexF(2)
        PL1((f-(PLIndexF(1)-1)),:)=TableM(f,:);
    end
    for f=PLIndexF(2): PLIndexF(3)
        PL2((f-(PLIndexF(2)-1)),:)=TableM(f,:);
    end
    for f=PLIndexF(3): PLIndexF(4)
        PL3((f-(PLIndexF(3)-1)),:)=TableM(f,:);
    end
elseif NoWV ==4
    for f=PLIndexF(1): PLIndexF(2)
        PL1((f-(f-1)),:)=TableM(f,:);
    end
    for f=PLIndexF(2): PLIndexF(3)
        PL2((f-(f-1)),:)=TableM(f,:);
    end
    for f=PLIndexF(3): PLIndexF(4)
        PL3((f-(f-1)),:)=TableM(f,:);
    end
    for f=PLIndexF(4): PLIndexF(5)
        PL4((f-(f-1)),:)=TableM(f,:);
    end
end

if NoWV == 2
        AVGAPL=[mean(PL1);mean(PL2)];
    elseif NoWV == 3
        AVGAPL=[mean(PL1);mean(PL2);mean(PL3)];
    else NoWV = 4;
        AVGAPL=[mean(PL1);mean(PL2);mean(PL3);mean(PL4)];
end

for k=1:(Columnlength/2) %creates the DT matricies that the thermal coefficent loop uses
    for j=1: NoWV % 3 needs to change to function input
    DT4TR(j,k)=AVGAPL(j,2*k)-AVGAPL(j,2*k-1); % 3 needs to change to function input
    end
end

for k=1:(Columnlength/2) %Puts terms into the thermal coefficent matricies for SN019
    for j=1:3 % 3 needs to change to function input
    TR(j,k)=DT4TR(j,k)/Watt(1,j); % 3 needs to change to function input
    end
end    

hold on
numberOfDataSets=50;
newDefaultColors = rand(numberOfDataSets, 3);
set(gca, 'ColorOrder', newDefaultColors, 'NextPlot', 'replacechildren');
newColorOrder = get(gca,'ColorOrder');

figure %Graphs the Thermal Resistance
plot(Watt,TR,'-x');
xlabel('Power Level [W]');
ylabel('Thermal resistance[C/W]');
title('Thermal Resistance(019)[C/W] per Power Level[W]');
xticks(Watt);
legend('SN019 25','SN019 26','SN019 27','SN019 28','SN019 29','SN019 30','SN019 31','SN019 32','SN029 25','SN029 26','SN029 27','SN029 28','SN02 29','SN029 30','SN029 31','SN029 32')
axis([(Watt(1,1)-1) (Watt(1,3)+1) -1 1]);
grid on;
hold off
%% Section 6 - Bookkeeping & Exportation to Excel

EvapCondCombT=array2table(AVGAPL);
DtCombT=array2table(DT4TR);
ThermalResistanceT= array2table(TR);

if Orientation == 1
writetable(EvapCondCombT,fileoutput,'Sheet',1,'Range','B4') 
writetable(DtCombT,fileoutput,'Sheet',1,'Range','B10')
writetable(ThermalResistanceT,fileoutput,'Sheet',1,'Range','B16')
    else 
    writetable(EvapCondCombT,fileoutput,'Sheet',1,'Range','B23') 
    writetable(DtCombT,fileoutput,'Sheet',1,'Range','B29')
    writetable(ThermalResistanceT,fileoutput,'Sheet',1,'Range','B35')
end
